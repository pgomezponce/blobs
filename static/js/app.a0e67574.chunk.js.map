{"version":3,"sources":["Blob.js","App.js","web-build/register-service-worker.js"],"names":["Blob","props","style","state","width","height","blobs","merge","list_of_origins","list_of_curve_list","scale","blobGraphs","length","index","origin","curve_list","push","Graph","this","viewBox","map","blob","d","toString","fill","color","opacity","Component","propType","PropTypes","object","arrayOf","instanceOf","Origin","isRequired","Curve","number","curve","x1","y1","x2","y2","x3","y3","o1","o2","Screen","App","colorScheme","useColorScheme","backgroundColor","fontColor","blobColor","StyleSheet","create","text","container","getStyle","console","log","list_of_curves","randomCurve","View","styles","StatusBar","Math","round","random","flex","alignItems","justifyContent","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error"],"mappings":"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","file":"static/js/app.a0e67574.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Svg, { Path } from \"react-native-svg\";\nimport PropTypes from \"prop-types\";\n\nexport default class Blob extends Component {\n  constructor(props) {\n    super(props);\n    this.style = props.style;\n    this.state = {\n      width: props.width,\n      height: props.height,\n      blobs: this.merge(props.list_of_origins, props.list_of_curve_list),\n      scale: props.scale,\n    };\n  }\n\n  merge(list_of_origins, list_of_curve_list){\n    let blobGraphs = [];\n    if(list_of_origins.length === list_of_curve_list.length)\n    {\n        for (let index = 0; index < list_of_origins.length; index++) {\n            const origin = list_of_origins[index];\n            const curve_list = list_of_curve_list[index];\n\n            blobGraphs.push(new Graph(origin, curve_list));\n        }\n    }\n    return blobGraphs;\n}\n\n  render() {\n    return (\n      <Svg\n        width={this.state.width}\n        height={this.state.height}\n        viewBox={\n          \"-\" +\n          this.state.width / 2 +\n          \" -\" +\n          this.state.height / 2 +\n          \" \" +\n          this.state.width +\n          \" \" +\n          this.state.height\n        }\n      >\n        {this.state.blobs.map(blob => \n            <Path d={blob.toString()} scale={this.state.scale} fill={this.style.blob.color} opacity={0.5}/>\n        )}\n      </Svg>\n    );\n  }\n}\n\nBlob.propType = {\n  style: PropTypes.object,\n  list_of_origins: PropTypes.arrayOf(PropTypes.instanceOf(Origin)).isRequired,\n  list_of_curve_list: PropTypes.arrayOf(PropTypes.arrayOf(Curve)).isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n};\n\nclass Graph {\n    constructor(origin, curve_list)\n    {\n        this.origin = origin;\n        this.curve_list = curve_list;\n    }\n\n    toString(){\n        return this.origin.toString() + this.curve_list.map(curve =>curve.toString());\n    }\n}\n\nexport class Curve {\n  constructor(x1, y1, x2, y2, x3, y3) {\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.x3 = x3;\n    this.y3 = y3;\n  }\n\n  static toPoint(o1, o2) {\n    let x1 = o1;\n    let y1 = o2;\n    let x3 = o1;\n    let y3 = o2;\n\n    return \"S\" + x1 + \" \" + y1 + \" \" + x3 + \" \" + y3 + \" \";\n  }\n\n  toString() {\n    return (\n      \"C\" +\n      this.x1 +\n      \" \" +\n      this.y1 +\n      \" \" +\n      this.x2 +\n      \" \" +\n      this.y2 +\n      \" \" +\n      this.x3 +\n      \" \" +\n      this.y3 +\n      \" \"\n    );\n  }\n}\n\nexport class Origin {\n  constructor(x1, y1) {\n    this.x1 = x1;\n    this.y1 = y1;\n  }\n  toString() {\n    return \"M\" + this.x1 + \" \" + this.y1 + \" \";\n  }\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { Appearance, Platform, StyleSheet, Text, View } from 'react-native';\nimport { AppearanceProvider, useColorScheme } from 'react-native-appearance';\nimport Blob, { Curve, Origin } from './Blob';\n\n\n\nexport default function Screen() {\n  return (\n    <AppearanceProvider>\n      <App/>\n    </AppearanceProvider>\n  );\n}\n\nfunction App() {\n  const colorScheme = useColorScheme();\n  let style = getStyle(colorScheme);\n  console.log(colorScheme);\n  let x_origin = 0;\n  let y_origin = 0;\n\n  let list_of_origins = [new Origin(x_origin, y_origin), new Origin(x_origin, y_origin), new Origin(x_origin, y_origin)];\n  let list_of_curves = [[randomCurve(), randomCurve(),randomCurve(),randomCurve()], [randomCurve(), randomCurve(),randomCurve(),randomCurve()],[randomCurve(), randomCurve(),randomCurve(),randomCurve()]];\n\n  return (\n    <View style={[styles.container, style.container]}>\n      <Blob scale={10} height={400} width={400} style={{blob:{color: colorScheme === 'dark' ? '#b65302' : '#FFA04F'}}} list_of_curve_list={list_of_curves} list_of_origins={list_of_origins}/>\n      <StatusBar style=\"auto\" />\n    </View>\n  );\n}\n\nfunction randomCurve() {\n  let x1,x2,x3;\n  let y1,y2,y3;\n\n  x1 = Math.round((Math.random() - 0.5) * 2 * 10);\n  x2 = Math.round((Math.random() - 0.5) * 2 * 10);\n  x3 = Math.round((Math.random() - 0.5) * 2 * 10);\n  y1 = Math.round((Math.random() - 0.5) * 2 * 10);\n  y2 = Math.round((Math.random() - 0.5) * 2 * 10);\n  y3 = Math.round((Math.random() - 0.5) * 2 * 10);\n\n  return new Curve(x1,y1,x2,y2,x3,y3);\n}\n\nfunction getStyle(colorScheme) {\n  let backgroundColor = colorScheme === 'dark' ? 'black' : 'white';\n  let fontColor = colorScheme === 'dark' ? 'white' : 'black';\n  let blobColor = colorScheme === 'dark' ? '#b65302' : '#FFA04F';\n  return StyleSheet.create({\n    text:Â {\n      color: fontColor,\n    },\n    blob: {\n      color: blobColor,\n    },\n    container: {\n      backgroundColor: backgroundColor\n    }\n  })\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    height:'100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/blobs/expo-service-worker.js', { scope: '/blobs/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}